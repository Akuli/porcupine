# These settings can be overrided in your user-specific filetypes.toml. To edit
# it, go to Settings --> Config Files.
#
# There's a friendly introduction to editing this file on Porcupine Wiki:
#
#    https://github.com/Akuli/porcupine/wiki/Getting-Porcupine-to-work-with-a-programming-language
#
# Available options (plugins may add more):
#
#    filename_patterns
#        List of strings with * used as wildcard, such as "*.py" to match files
#        named "something.py". You can also specify "foo/*.py" to only match
#        Python files inside a folder named foo, but you must use forward
#        slashes for this, even on Windows.
#
#    shebang_regex
#        Regular expression checked against the first line of a file when no
#        filename_pattern matches. See the Python documentation for supported
#        regular expression syntax:
#
#            https://docs.python.org/3/library/re.html#regular-expression-syntax
#
#        Use single quotes to avoid having to escape backslashes.
#
#        By default, the regex may match any part of the first line. Put the
#        regex between ^ and $ to match the entire first line, e.g.
#
#            '^#!/usr/bin/python(2|3)$'
#
#        Arguments starting with '-' are ignored, so the regex '^#!/bin/foo$'
#        matches the shebang '#!/bin/foo --bar --baz'.
#
#    encoding (default: "utf-8")
#        Name of encoding to be used with these files.
#
#    pygments_lexer (default: "pygments.lexers.TextLexer")
#        Name of a Pygments lexer class that will be used for syntax
#        highlighting. See the Pygments documentation for lexers that Pygments
#        comes with:
#
#            https://pygments.org/docs/lexers/
#
#    tabs2spaces (default: true)
#        If this is true, then spaces will be used for indentation.
#
#    indent_size (default: 4)
#        If tabs2spaces is false, this specifies the number of spaces
#        corresponding to one tab character. If tabs2spaces is true, then this
#        is the number of spaces used for indentation.
#
#    autoindent_regexes
#        Regexes used to determine whether the code should be indented or
#        dedented automatically when enter is pressed. Before using these
#        regexes, comments are removed and whitespace is stripped from beginning
#        and end of the line. Then the regexes are matched against the entire
#        line so that even if the regex does not use '^' or '$', it must match
#        the entire line.
#
#            indent_regex
#                A regular expression for indenting, such as '.*:' to indent
#                when a line ends with colon.
#
#            dedent_regex
#                A regular expression for dedenting.
#
#        In addition to these regular expressions, (), {} and [] are supported
#        with all file types.
#
#    comment_prefix
#        If specified as one character, typing this character with many lines
#        selected will put it to the beginning of each line. For example, for
#        making comments like the comment that you are currently reading, this
#        is set to '#' in the [TOML] section. This is also used to strip
#        comments from lines of code before using autoindent_regexes.
#
#    line_ending
#        One of "CR", "LF" or "CRLF" (aka \r, \n and \r\n). To change the
#        default line ending, go to Porcupine Settings in the Edit menu.
#
#    trim_trailing_whitespace
#        Set this to false to prevent removing whitespace from ends of the lines
#        automatically when Enter is pressed. The default is true.
#
#    insert_final_newline
#        By default, Porcupine makes sure that files end with a newline when
#        saving. Set this to false to disable that.
#
#    max_line_length
#        How many characters to put before the long line marker. Set this to 0
#        or negative value to disable the long line marker.
#
#    autocomplete_chars
#        List of one-character strings. The autocompletion popup triggers
#        automatically when one of these characters is entered.
#
#    commands
#        Mapping with the following strings as keys and commands as values:
#
#            compile
#                This command will be ran without a separate terminal window.
#                Leave this unset if the files don't need to be compiled.
#
#            run
#                This command will be ran in a separate terminal window.
#
#            lint
#                This command is not related to compiling and running. It will
#                be ran without a separate terminal window.
#
#        These substitutions are performed to the commands before they are ran:
#
#            {file}
#                File being edited, e.g. "hello world.tar.gz"
#
#            {no_ext}
#                Like {file}, but without the last file extenion, e.g.
#                "hello world.tar".
#
#            {no_exts}
#                Like {file}, but with no file extensions, e.g. "hello world".
#
#            {python}
#                Path to a Python executable suitable for running the user's
#                programs. The Python executable may be inside a virtualenv.
#
#            {exe}
#                Same as {no_ext}.exe on Windows and ./{no_ext} on other
#                platforms.
#
#        Redirections with e.g. > or | don't work. The command is split into an
#        argument list before substituting in the filenames, so spaces in
#        filenames don't cause issues. For example, if {file} is
#        "hello world.txt", then specifying this...
#
#            tar cf {no_ext}.tar {file}
#
#        ...results in running a properly quoted command like this one:
#
#            tar cf "hello world.tar" "hello world.txt"
#
#    langserver
#        A mapping with these keys and values in it:
#
#        command
#            Command string that will be ran to start the langserver process.
#            You can use the following substitution:
#
#            {porcupine_python}
#                Path to the Python executable that Porcupine is currently
#                running with. This is not necessarily the same Python that is
#                used for running programs written by the user. For example, on
#                Windows, the Porcupine installer includes a copy of Python,
#                and {porcupine_python} points to that.
#
#            The command string is first split into parts and then substituted,
#            so you likely don't need to worry about quoting or escaping.
#
#        language_id
#            An "Identifier" from the table shown here, as a string:
#            https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentItem
#
#        port
#            Leave this unset if you want to use stdin and stdout with the
#            langserver. If the langserver uses a TCP socket listening on
#            localhost instead, then set this to the port number that it uses.
#
#        settings
#            Configuration that will be passed to the langserver, as a nested
#            mapping. See the langserver's for what you can include here.
#
#            In strings, {python_venv} will be replaced with a path to the
#            currently selected Python virtual environment. If no venv is set,
#            the whole string will be replaced with null.

["Plain Text"]
pygments_lexer = "pygments.lexers.TextLexer"

[Python]
filename_patterns = ["*.py", "*.pyw"]
shebang_regex = 'python(\d(\.\d)?)?$'
pygments_lexer = "pygments.lexers.Python3Lexer"
tabs2spaces = true
indent_size = 4
max_line_length = 79   # pep8 says so, lol
commands = {run = "{python} {file}"}
langserver = {command = "{porcupine_python} -m pyls", language_id = "python"}
comment_prefix = '#'
autoindent_regexes = {dedent = '(return|raise)( .+)?|break|pass|continue', indent = '.*:'}

[Python.langserver.settings.pyls.plugins.jedi]
environment = "{python_venv}"

["Python stub file"]
filename_patterns = ["*.pyi"]
pygments_lexer = "pygments.lexers.Python3Lexer"
tabs2spaces = true
indent_size = 4
max_line_length = 130   # https://github.com/python/typeshed/blob/4586ed9/CONTRIBUTING.md#conventions
autocomplete_chars = ["."]
comment_prefix = '#'
autoindent_regexes = {indent = '.*:'}

[C]
filename_patterns = ["*.c", "*.h"]
pygments_lexer = "pygments.lexers.CLexer"
commands = {compile = "cc {file} -Wall -Wextra -std=c99 -o {exe}", run = "{exe}"}
langserver = {command = "clangd", language_id = "c"}
comment_prefix = '//'
# Press shift+enter instead of enter to avoid indent after 'case foo:'
autoindent_regexes = {dedent = '(return( .+)?|break|continue);', indent = '(case .+|default):'}

["C++"]
# Override this in your own filetypes.toml if you use .h for C++ headers
filename_patterns = ["*.c++", "*.cpp", "*.cxx", "*.cc", "*.h++", "*.hpp", "*.hxx", "*.hh"]
pygments_lexer = "pygments.lexers.CppLexer"
commands = {compile = "c++ {file} -Wall -Wextra --std=c++17 -o {exe}", run = "{exe}"}
langserver = {command = "clangd", language_id = "cpp"}
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

[Java]
filename_patterns = ["*.java"]
pygments_lexer = "pygments.lexers.JavaLexer"
commands = {compile = "javac {file}", run = "java {no_ext}"}
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

[JavaScript]
filename_patterns = ["*.js"]
pygments_lexer = "pygments.lexers.JavascriptLexer"
tabs2spaces = true
indent_size = 2
commands = {run = "node {file}"}
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

[TypeScript]
filename_patterns = ["*.ts"]
pygments_lexer = "pygments.lexers.TypeScriptLexer"
tabs2spaces = true
indent_size = 2
commands = {compile = "tsc {file}", run = "node {no_ext}.js"}
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

[Makefile]
filename_patterns = ["Makefile", "makefile", "Makefile.*", "makefile.*"]
pygments_lexer = "pygments.lexers.MakefileLexer"
# make doesn't work with spaces
tabs2spaces = false
commands = {run = "make"}
comment_prefix = '#'

# TODO: Windows batch files and powershell files
#
# i'm not trying to discriminate anyone with pygments_lexer and
# commands, override them in your user-specific config you want to
#
# shebang_regex is partly copy/pasted from nano's default config
[Shell]
filename_patterns = ["*.sh"]
shebang_regex = '((ba|da|k|pdk)?sh[-0-9_]*|openrc-run|runscript)$'
pygments_lexer = "pygments.lexers.BashLexer"
commands = {run = "bash {file}"}
comment_prefix = '#'
autoindent_regexes = {dedent = '(return|exit)( .+)?|break|continue|;;', indent = '[^()]+\)|.*\b(then|do|else|in)'}

# tcl man pages and many people on wiki.tcl.tk indent with 3 spaces
[Tcl]
filename_patterns = ["*.tcl"]
shebang_regex = '(wi|tcl)sh$'
pygments_lexer = "pygments.lexers.TclLexer"
tabs2spaces = true
commands = {run = "tclsh {file}"}
comment_prefix = '#'

# TODO: autoindents for many more languages

[JSON]
filename_patterns = ["*.json"]
pygments_lexer = "pygments.lexers.JsonLexer"
indent_size = 2
tabs2spaces = true

[TOML]
filename_patterns = ["*.toml"]
pygments_lexer = "pygments.lexers.TOMLLexer"
comment_prefix = '#'

[reStructuredText]
filename_patterns = ["*.rst"]
pygments_lexer = "pygments.lexers.RstLexer"

[Markdown]
filename_patterns = ["*.md", "*.markdown"]
pygments_lexer = "pygments.lexers.MarkdownLexer"
autoindent_regexes = {dedent = '.*\.', indent = '^([0-9]+\.|-) .*'}

[YAML]
filename_patterns = ["*.yml", "*.yaml"]
pygments_lexer = "pygments.lexers.YamlLexer"
tabs2spaces = true
indent_size = 2
comment_prefix = '#'
autoindent_regexes = {indent = '.*:'}

[HTML]
filename_patterns = ["*.html", "*.htm"]
pygments_lexer = "pygments.lexers.HtmlLexer"
tabs2spaces = true
indent_size = 2

[TeX]
filename_patterns = ["*.tex"]
pygments_lexer = "pygments.lexers.TexLexer"
tabs2spaces = true
comment_prefix = '%'

["NSIS installer file"]
filename_patterns = ["*.nsi", "*.nsh"]
pygments_lexer = "pygments.lexers.NSISLexer"
tabs2spaces = true
indent_size = 2
comment_prefix = ';'
