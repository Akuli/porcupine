# These settings can be overrided in your user-specific filetypes.toml. To edit
# it, go to Settings --> Config Files.
#
# There's a friendly introduction to editing this file on Porcupine Wiki:
#
#    https://github.com/Akuli/porcupine/wiki/Getting-Porcupine-to-work-with-a-programming-language
#
# Most commonly used options (plugins may add more):
#
#    filename_patterns
#        List of strings with * used as wildcard, such as "*.py" to match files
#        named "something.py". You can also specify "foo/*.py" to only match
#        Python files inside a folder named foo, but you must use forward
#        slashes for this, even on Windows.
#
#    shebang_regex
#        Regular expression checked against the first line of a file when no
#        filename_pattern matches. See the Python documentation for supported
#        regular expression syntax:
#
#            https://docs.python.org/3/library/re.html#regular-expression-syntax
#
#        Use single quotes to avoid having to escape backslashes.
#
#        By default, the regex may match any part of the first line. Put the
#        regex between ^ and $ to match the entire first line, e.g.
#
#            '^#!/usr/bin/python(2|3)$'
#
#        Arguments starting with '-' are ignored, so the regex '^#!/bin/foo$'
#        matches the shebang '#!/bin/foo --bar --baz'.
#
#    pygments_lexer (default: "pygments.lexers.TextLexer")
#        Name of a Pygments lexer class that will be used for syntax
#        highlighting. See the Pygments documentation for lexers that Pygments
#        comes with:
#
#            https://pygments.org/docs/lexers/
#
#    tree_sitter
#        TODO: document
#
#    tabs2spaces (default: true)
#        If this is true, then spaces will be used for indentation.
#
#    indent_size (default: 4)
#        If tabs2spaces is false, this specifies the number of spaces
#        corresponding to one tab character. If tabs2spaces is true, then this
#        is the number of spaces used for indentation.
#
#    autoindent_regexes
#        Regexes used to determine whether the code should be indented or
#        dedented automatically when enter is pressed. Before using these
#        regexes, comments are removed and whitespace is stripped from beginning
#        and end of the line. Then the regexes are matched against the entire
#        line so that even if the regex does not use '^' or '$', it must match
#        the entire line.
#
#            indent_regex
#                A regular expression for indenting, such as '.*:' to indent
#                when a line ends with colon.
#
#            dedent_regex
#                A regular expression for dedenting.
#
#            dedent_prev_line (default: false)
#                Whether to dedent the previous line as well.
#
#        In addition to these regular expressions, (), {} and [] are supported
#        with all file types.
#
#    comment_prefix
#        If specified as one character, typing this character with many lines
#        selected will put it to the beginning of each line. For example, for
#        making comments like the comment that you are currently reading, this
#        is set to '#' in the [TOML] section. This is also used to strip
#        comments from lines of code before using autoindent_regexes.
#
#    trim_trailing_whitespace
#        Set this to false to prevent removing whitespace from ends of the lines
#        automatically when Enter is pressed. The default is true.
#
#    insert_final_newline
#        By default, Porcupine makes sure that files end with a newline when
#        saving. Set this to false to disable that.
#
#    max_line_length
#        How many characters to put before the long line marker. Set this to 0
#        or negative value to disable the long line marker.
#
#    autocomplete_chars
#        List of one-character strings. The autocompletion popup triggers
#        automatically when one of these characters is entered.
#
#    example_commands
#        List with information about a command to show in the "Run Command"
#        dialog (Shift+{F5,F6,F7,F8} by default). Each list item must have the
#        following keys:
#
#            command
#                Content of the "Run this command" text entry.
#
#            windows_command (default: same as command)
#                If this is specified and porcupine is running on Windows, it is
#                used instead of "command".
#
#            macos_command (default: same as command)
#                If this is specified and porcupine is running on MacOS, it is
#                used instead of "command".
#
#            working_directory (default: "{folder_path}")
#                Content of the "In this directory" text entry.
#
#            external_terminal (default: true)
#                Boolean: true to use a terminal or command prompt, false to run
#                within the same Porcupine window.
#
#    langserver
#        A mapping with these keys and values in it:
#
#        command
#            Command string that will be ran to start the langserver process.
#            You can use the following substitution:
#
#            {porcupine_python}
#                Path to the Python executable that Porcupine is currently
#                running with. This is not necessarily the same Python that is
#                used for running programs written by the user. For example, on
#                Windows, the Porcupine installer includes a copy of Python,
#                and {porcupine_python} points to that.
#
#            The command string is first split into parts and then substituted,
#            so you likely don't need to worry about quoting or escaping.
#
#        language_id
#            An "Identifier" from the table shown here, as a string:
#            https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentItem
#
#        port
#            Leave this unset if you want to use stdin and stdout with the
#            langserver. If the langserver uses a TCP socket listening on
#            localhost instead, then set this to the port number that it uses.
#
#        settings
#            Configuration that will be passed to the langserver, as a nested
#            mapping. See the langserver's for what you can include here.
#
#            In strings, {python_venv} will be replaced with a path to the
#            currently selected Python virtual environment. If no venv is set,
#            the whole string will be replaced with null.

["Plain Text"]
filename_patterns = ["*.txt"]
pygments_lexer = "pygments.lexers.TextLexer"

[Python]
filename_patterns = ["*.py", "*.pyw"]
shebang_regex = 'python(\d(\.\d)?)?$'
pygments_lexer = "pygments.lexers.Python3Lexer"
tabs2spaces = true
indent_size = 4
max_line_length = 79   # pep8 says so, lol
comment_prefix = '#'
autoindent_regexes = {dedent = '(return|raise)( .+)?|break|pass|continue', indent = '.*:'}

[[Python.example_commands]]
command = "python3 {file_name}"
windows_command = "py {file_name}"
[[Python.example_commands]]
command = "python3 -m {project_name}"
windows_command = "py -m {project_name}"
working_directory = "{project_path}"

[Python.langserver]
command = "{porcupine_python} -m pyls"
language_id = "python"

[Python.langserver.settings.pyls.plugins.jedi]
environment = "{python_venv}"

[Python.tree_sitter]
language_name = "python"
# not recursing inside attributes allows me to distinguish attributes and variables
# otherwise both would be identifier, now attributes are "attribute"
#
# TODO: recurse inside f-strings
dont_recurse_inside = ["string", "attribute"]

[Python.tree_sitter.token_mapping]
comment = "Token.Comment"
# TODO: which of the number things are needed?
integer = "Token.Literal.Number.Integer"
float = "Token.Literal.Number.Float"
number_literal = "Token.Literal.Number"
string = "Token.Literal.String"
"identifier[ArithmeticError]" = "Token.Name.Exception"
"identifier[AssertionError]" = "Token.Name.Exception"
"identifier[AttributeError]" = "Token.Name.Exception"
"identifier[BaseException]" = "Token.Name.Builtin"
"identifier[BlockingIOError]" = "Token.Name.Exception"
"identifier[BrokenPipeError]" = "Token.Name.Exception"
"identifier[BufferError]" = "Token.Name.Exception"
"identifier[BytesWarning]" = "Token.Name.Builtin"
"identifier[ChildProcessError]" = "Token.Name.Exception"
"identifier[ConnectionAbortedError]" = "Token.Name.Exception"
"identifier[ConnectionError]" = "Token.Name.Exception"
"identifier[ConnectionRefusedError]" = "Token.Name.Exception"
"identifier[ConnectionResetError]" = "Token.Name.Exception"
"identifier[DeprecationWarning]" = "Token.Name.Builtin"
"identifier[EOFError]" = "Token.Name.Exception"
"identifier[Ellipsis]" = "Token.Name.Builtin"
"identifier[EnvironmentError]" = "Token.Name.Exception"
"identifier[Exception]" = "Token.Name.Builtin"
"identifier[False]" = "Token.Name.Builtin"
"identifier[FileExistsError]" = "Token.Name.Exception"
"identifier[FileNotFoundError]" = "Token.Name.Exception"
"identifier[FloatingPointError]" = "Token.Name.Exception"
"identifier[FutureWarning]" = "Token.Name.Builtin"
"identifier[GeneratorExit]" = "Token.Name.Builtin"
"identifier[IOError]" = "Token.Name.Exception"
"identifier[ImportError]" = "Token.Name.Exception"
"identifier[ImportWarning]" = "Token.Name.Builtin"
"identifier[IndentationError]" = "Token.Name.Exception"
"identifier[IndexError]" = "Token.Name.Exception"
"identifier[InterruptedError]" = "Token.Name.Exception"
"identifier[IsADirectoryError]" = "Token.Name.Exception"
"identifier[KeyError]" = "Token.Name.Exception"
"identifier[KeyboardInterrupt]" = "Token.Name.Builtin"
"identifier[LookupError]" = "Token.Name.Exception"
"identifier[MemoryError]" = "Token.Name.Exception"
"identifier[ModuleNotFoundError]" = "Token.Name.Exception"
"identifier[NameError]" = "Token.Name.Exception"
"identifier[None]" = "Token.Name.Builtin"
"identifier[NotADirectoryError]" = "Token.Name.Exception"
"identifier[NotImplemented]" = "Token.Name.Builtin"
"identifier[NotImplementedError]" = "Token.Name.Exception"
"identifier[OSError]" = "Token.Name.Exception"
"identifier[OverflowError]" = "Token.Name.Exception"
"identifier[PendingDeprecationWarning]" = "Token.Name.Builtin"
"identifier[PermissionError]" = "Token.Name.Exception"
"identifier[ProcessLookupError]" = "Token.Name.Exception"
"identifier[RecursionError]" = "Token.Name.Exception"
"identifier[ReferenceError]" = "Token.Name.Exception"
"identifier[ResourceWarning]" = "Token.Name.Builtin"
"identifier[RuntimeError]" = "Token.Name.Exception"
"identifier[RuntimeWarning]" = "Token.Name.Builtin"
"identifier[StopAsyncIteration]" = "Token.Name.Builtin"
"identifier[StopIteration]" = "Token.Name.Builtin"
"identifier[SyntaxError]" = "Token.Name.Exception"
"identifier[SyntaxWarning]" = "Token.Name.Builtin"
"identifier[SystemError]" = "Token.Name.Exception"
"identifier[SystemExit]" = "Token.Name.Builtin"
"identifier[TabError]" = "Token.Name.Exception"
"identifier[TimeoutError]" = "Token.Name.Exception"
"identifier[True]" = "Token.Name.Builtin"
"identifier[TypeError]" = "Token.Name.Exception"
"identifier[UnboundLocalError]" = "Token.Name.Exception"
"identifier[UnicodeDecodeError]" = "Token.Name.Exception"
"identifier[UnicodeEncodeError]" = "Token.Name.Exception"
"identifier[UnicodeError]" = "Token.Name.Exception"
"identifier[UnicodeTranslateError]" = "Token.Name.Exception"
"identifier[UnicodeWarning]" = "Token.Name.Builtin"
"identifier[UserWarning]" = "Token.Name.Builtin"
"identifier[ValueError]" = "Token.Name.Exception"
"identifier[Warning]" = "Token.Name.Builtin"
"identifier[ZeroDivisionError]" = "Token.Name.Exception"
"identifier[__debug__]" = "Token.Name.Builtin"
"identifier[__doc__]" = "Token.Name.Builtin"
"identifier[__import__]" = "Token.Name.Builtin"
"identifier[__loader__]" = "Token.Name.Builtin"
"identifier[__name__]" = "Token.Name.Builtin"
"identifier[__package__]" = "Token.Name.Builtin"
"identifier[__path__]" = "Token.Name.Builtin"
"identifier[__spec__]" = "Token.Name.Builtin"
"identifier[abs]" = "Token.Name.Builtin"
"identifier[all]" = "Token.Name.Builtin"
"identifier[any]" = "Token.Name.Builtin"
"identifier[ascii]" = "Token.Name.Builtin"
"identifier[bin]" = "Token.Name.Builtin"
"identifier[bool]" = "Token.Name.Builtin"
"identifier[breakpoint]" = "Token.Name.Builtin"
"identifier[bytearray]" = "Token.Name.Builtin"
"identifier[bytes]" = "Token.Name.Builtin"
"identifier[callable]" = "Token.Name.Builtin"
"identifier[chr]" = "Token.Name.Builtin"
"identifier[classmethod]" = "Token.Name.Builtin"
"identifier[compile]" = "Token.Name.Builtin"
"identifier[complex]" = "Token.Name.Builtin"
"identifier[copyright]" = "Token.Name.Builtin"
"identifier[credits]" = "Token.Name.Builtin"
"identifier[delattr]" = "Token.Name.Builtin"
"identifier[dict]" = "Token.Name.Builtin"
"identifier[dir]" = "Token.Name.Builtin"
"identifier[divmod]" = "Token.Name.Builtin"
"identifier[enumerate]" = "Token.Name.Builtin"
"identifier[eval]" = "Token.Name.Builtin"
"identifier[exec]" = "Token.Name.Builtin"
"identifier[exit]" = "Token.Name.Builtin"
"identifier[filter]" = "Token.Name.Builtin"
"identifier[float]" = "Token.Name.Builtin"
"identifier[format]" = "Token.Name.Builtin"
"identifier[frozenset]" = "Token.Name.Builtin"
"identifier[getattr]" = "Token.Name.Builtin"
"identifier[globals]" = "Token.Name.Builtin"
"identifier[hasattr]" = "Token.Name.Builtin"
"identifier[hash]" = "Token.Name.Builtin"
"identifier[help]" = "Token.Name.Builtin"
"identifier[hex]" = "Token.Name.Builtin"
"identifier[id]" = "Token.Name.Builtin"
"identifier[input]" = "Token.Name.Builtin"
"identifier[int]" = "Token.Name.Builtin"
"identifier[isinstance]" = "Token.Name.Builtin"
"identifier[issubclass]" = "Token.Name.Builtin"
"identifier[iter]" = "Token.Name.Builtin"
"identifier[len]" = "Token.Name.Builtin"
"identifier[license]" = "Token.Name.Builtin"
"identifier[list]" = "Token.Name.Builtin"
"identifier[locals]" = "Token.Name.Builtin"
"identifier[map]" = "Token.Name.Builtin"
"identifier[max]" = "Token.Name.Builtin"
"identifier[memoryview]" = "Token.Name.Builtin"
"identifier[min]" = "Token.Name.Builtin"
"identifier[next]" = "Token.Name.Builtin"
"identifier[object]" = "Token.Name.Builtin"
"identifier[oct]" = "Token.Name.Builtin"
"identifier[open]" = "Token.Name.Builtin"
"identifier[ord]" = "Token.Name.Builtin"
"identifier[pow]" = "Token.Name.Builtin"
"identifier[print]" = "Token.Name.Builtin"
"identifier[property]" = "Token.Name.Builtin"
"identifier[quit]" = "Token.Name.Builtin"
"identifier[range]" = "Token.Name.Builtin"
"identifier[repr]" = "Token.Name.Builtin"
"identifier[reversed]" = "Token.Name.Builtin"
"identifier[round]" = "Token.Name.Builtin"
"identifier[self]" = "Token.Name.Builtin"
"identifier[set]" = "Token.Name.Builtin"
"identifier[setattr]" = "Token.Name.Builtin"
"identifier[slice]" = "Token.Name.Builtin"
"identifier[sorted]" = "Token.Name.Builtin"
"identifier[staticmethod]" = "Token.Name.Builtin"
"identifier[str]" = "Token.Name.Builtin"
"identifier[sum]" = "Token.Name.Builtin"
"identifier[super]" = "Token.Name.Builtin"
"identifier[tuple]" = "Token.Name.Builtin"
"identifier[type]" = "Token.Name.Builtin"
"identifier[vars]" = "Token.Name.Builtin"
"identifier[zip]" = "Token.Name.Builtin"
and = "Token.Keyword"
as = "Token.Keyword"
assert = "Token.Keyword"
async = "Token.Keyword"
await = "Token.Keyword"
break = "Token.Keyword"
class = "Token.Keyword"
continue = "Token.Keyword"
def = "Token.Keyword"
del = "Token.Keyword"
elif = "Token.Keyword"
else = "Token.Keyword"
except = "Token.Keyword"
false = "Token.Keyword"
finally = "Token.Keyword"
for = "Token.Keyword"
from = "Token.Keyword"
global = "Token.Keyword"
if = "Token.Keyword"
import = "Token.Keyword"
in = "Token.Keyword"
is = "Token.Keyword"
lambda = "Token.Keyword"
none = "Token.Keyword"
nonlocal = "Token.Keyword"
not = "Token.Keyword"
or = "Token.Keyword"
pass = "Token.Keyword"
raise = "Token.Keyword"
return = "Token.Keyword"
true = "Token.Keyword"
try = "Token.Keyword"
while = "Token.Keyword"
with = "Token.Keyword"
yield = "Token.Keyword"
anything_else = "Token.Operator"

["Python stub file"]
filename_patterns = ["*.pyi"]
pygments_lexer = "pygments.lexers.Python3Lexer"
tabs2spaces = true
indent_size = 4
max_line_length = 130   # https://github.com/python/typeshed/blob/4586ed9/CONTRIBUTING.md#conventions
autocomplete_chars = ["."]
comment_prefix = '#'
autoindent_regexes = {indent = '.*:'}

[C]
filename_patterns = ["*.c", "*.h"]
pygments_lexer = "pygments.lexers.CLexer"
comment_prefix = '//'
# Press alt+enter instead of enter to avoid indent after 'case foo:'
autoindent_regexes = {dedent = '(return( .+)?|break|continue);', indent = '(case .+|default):'}

["C++"]
# Override this in your own filetypes.toml if you use .h for C++ headers
filename_patterns = ["*.c++", "*.cpp", "*.cxx", "*.cc", "*.h++", "*.hpp", "*.hxx", "*.hh"]
pygments_lexer = "pygments.lexers.CppLexer"
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

[[C.example_commands]]
command = "gcc {file_name} -Wall -Wextra -std=c99 -o {file_stem}"
windows_command = "gcc {file_name} -Wall -Wextra -std=c99 -o {file_stem}.exe"
external_terminal = false
[["C++".example_commands]]
command = "g++ {file_name} -Wall -Wextra -std=c++17 -o {file_stem}"
windows_command = "g++ {file_name} -Wall -Wextra -std=c++17 -o {file_stem}.exe"
external_terminal = false

[[C.example_commands]]
command = "./{file_stem}"
windows_command = "{file_stem}.exe"
[["C++".example_commands]]
command = "./{file_stem}"
windows_command = "{file_stem}.exe"

[C.langserver]
command = "clangd"
language_id = "c"
["C++".langserver]
command = "clangd"
language_id = "cpp"

[Java]
filename_patterns = ["*.java"]
pygments_lexer = "pygments.lexers.JavaLexer"
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

[[Java.example_commands]]
command = "javac {file_name}"
external_terminal = false
[[Java.example_commands]]
command = "java {file_stem}"

[JavaScript]
filename_patterns = ["*.js"]
pygments_lexer = "pygments.lexers.JavascriptLexer"
tabs2spaces = true
indent_size = 2
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

# TODO: node typically ends up in path from ~/.bashrc
[[JavaScript.example_commands]]
command = "node {file_name}"
external_terminal = false  # useful for webdev?

[TypeScript]
filename_patterns = ["*.ts"]
pygments_lexer = "pygments.lexers.TypeScriptLexer"
tabs2spaces = true
indent_size = 2
comment_prefix = '//'
autoindent_regexes = {dedent = '(throw .+|return( .+)?|break|continue);', indent = '(case .+|default):'}

[[TypeScript.example_commands]]
command = "tsc {file_name}"
external_terminal = false
[[TypeScript.example_commands]]
command = "node {file_stem}.js"
external_terminal = false  # useful for webdev?

[Makefile]
filename_patterns = ["Makefile", "makefile", "Makefile.*", "makefile.*"]
pygments_lexer = "pygments.lexers.MakefileLexer"
# make doesn't work with spaces
tabs2spaces = false
comment_prefix = '#'

[[Makefile.example_commands]]
command = "make"
working_directory = "{project_path}"
external_terminal = false

# TODO: Windows batch files and powershell files
# override pygments_lexer if you want to
# shebang_regex is partly copy/pasted from nano's default config
[Shell]
filename_patterns = ["*.sh"]
shebang_regex = '((ba|da|k|pdk)?sh[-0-9_]*|openrc-run|runscript)$'
pygments_lexer = "pygments.lexers.BashLexer"
comment_prefix = '#'
autoindent_regexes = {dedent = '(return|exit)( .+)?|break|continue|;;', indent = '[^()]+\)|.*\b(then|do|else|in)'}

[[Shell.example_commands]]
command = "./{file_name}"
[[Shell.example_commands]]
command = "shellcheck {file_name}"
external_terminal = false

# tcl man pages and many people on wiki.tcl.tk indent with 3 spaces
[Tcl]
filename_patterns = ["*.tcl"]
shebang_regex = '(wi|tcl)sh$'
pygments_lexer = "pygments.lexers.TclLexer"
tabs2spaces = true
comment_prefix = '#'

[[Tcl.example_commands]]
command = "tclsh {file_name}"

# TODO: autoindents for many more languages

[JSON]
filename_patterns = ["*.json"]
pygments_lexer = "pygments.lexers.JsonLexer"
indent_size = 2
tabs2spaces = true

[TOML]
filename_patterns = ["*.toml"]
pygments_lexer = "pygments.lexers.TOMLLexer"
comment_prefix = '#'

[reStructuredText]
filename_patterns = ["*.rst"]
pygments_lexer = "pygments.lexers.RstLexer"

[Markdown]
filename_patterns = ["*.md", "*.markdown"]
pygments_lexer = "pygments.lexers.MarkdownLexer"
autoindent_regexes = {dedent = '.*\.', indent = '^([0-9]+\.|-) .*'}

[YAML]
filename_patterns = ["*.yml", "*.yaml"]
pygments_lexer = "pygments.lexers.YamlLexer"
tabs2spaces = true
indent_size = 2
comment_prefix = '#'
autoindent_regexes = {indent = '.*:'}

[HTML]
filename_patterns = ["*.html", "*.htm"]
pygments_lexer = "pygments.lexers.HtmlLexer"
tabs2spaces = true
indent_size = 2
autoindent_regexes = {dedent = '</.*>', indent = '<[^/!][^<>]*[^/]>|<[A-Za-z]>', dedent_prev_line = true}

[[HTML.example_commands]]
command = "x-www-browser {file_path} >/dev/null 2>&1 &"
macos_command = "open {file_path} >/dev/null 2>&1 &"
windows_command = "explorer {file_path}"
external_terminal = false

[TeX]
filename_patterns = ["*.tex"]
pygments_lexer = "pygments.lexers.TexLexer"
tabs2spaces = true
comment_prefix = '%'

["NSIS installer file"]
filename_patterns = ["*.nsi", "*.nsh"]
pygments_lexer = "pygments.lexers.NSISLexer"
tabs2spaces = true
indent_size = 2
comment_prefix = ';'
